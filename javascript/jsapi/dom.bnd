/* DOM bindings entries */

webidlfile "dom.idl";

/* interface Node members */


getter textContent %{
        dom_exception exc;
        dom_string *content;

        exc = dom_node_get_text_content(private->node, &content);
        if (exc != DOM_NO_ERR) {
		return JS_FALSE;
	}

	if (content != NULL) {
                jsret = JS_NewStringCopyN(cx, dom_string_data(content), dom_string_length(content));
		dom_string_unref(content);

        }
%}


operation appendChild %{
	struct dom_node *result = NULL;
        dom_exception exc;

	struct jsclass_private *node_private;
	dom_node_type node_type;

	JSLOG("appending %p", node);

	/* CAUTION this expects all Node objects private pointers to
	 * have private->node in the same place
	 */
	node_private = JS_GetInstancePrivate(cx, node, &JSClass_Text, NULL);
	if (node_private != NULL) {
		exc = dom_node_append_child(private->node, node_private->node, &result);
		if (exc != DOM_NO_ERR) {
			return JS_FALSE;
		}
	}

	if (result != NULL) {
		exc = dom_node_get_node_type(result, &node_type);
		if (exc != DOM_NO_ERR) {
			return JS_FALSE;
		}
		switch (node_type) {
		case DOM_ELEMENT_NODE:
			jsret = jsapi_new_HTMLElement(cx, NULL, NULL, result, private->htmlc);
			break;

		case DOM_TEXT_NODE:
			jsret = jsapi_new_Text(cx, NULL, NULL, result, private->htmlc);
			break;

		default:
			JSLOG("Unsupported result node type %d", node_type);
		}

	} else {
		JSLOG("No result");
	}
%}
